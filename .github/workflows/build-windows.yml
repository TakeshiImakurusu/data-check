name: Build Windows EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows-exe:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pandas openpyxl pyodbc pymysql configparser
    
    - name: List files to verify checkout
      run: |
        echo "Current directory contents:"
        dir
        echo "Python version:"
        python --version
        echo "Pip list:"
        pip list
    
    - name: Test Python import
      run: |
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import tkinter; print('Tkinter import successful')"
        python -c "import pandas; print('Pandas version:', pandas.__version__)"
        python -c "import openpyxl; print('Openpyxl import successful')"
    
    - name: Prepare files for PyInstaller
      run: |
        echo "Creating a simple spec file..."
        echo "# -*- mode: python ; coding: utf-8 -*-
block_cipher = None

a = Analysis(
    ['data_check.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('app_settings.json', '.'),
        ('check_definitions.json', '.'),
        ('input_file', 'input_file'),
    ],
    hiddenimports=[
        'dekispart', 'innosite', 'dekispart_school', 'cloud',
        'pandas._libs.tslibs.base', 'pandas._libs.tslibs.timedeltas',
        'tkinter', 'tkinter.ttk', 'tkinter.messagebox', 'tkinter.filedialog',
        'configparser', 'openpyxl.cell._writer'
    ],
    hookspath=[],
    runtime_hooks=[],
    excludes=['matplotlib', 'scipy', 'IPython', 'pytest'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='DataCheck',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    icon=None
)" > data_check.spec
    
    - name: Build Windows EXE
      run: |
        echo "Building EXE with PyInstaller..."
        pyinstaller data_check.spec --clean --noconfirm --log-level=DEBUG
    
    - name: List dist directory
      run: |
        echo "Contents of dist directory:"
        if (Test-Path "dist") {
          dir dist
        } else {
          echo "dist directory does not exist"
        }
    
    - name: Verify and upload EXE
      run: |
        if (Test-Path "dist\DataCheck.exe") {
          Write-Host "‚úÖ DataCheck.exe created successfully"
          $size = (Get-Item "dist\DataCheck.exe").Length / 1MB
          Write-Host "üì¶ Size: $($size.ToString('F1')) MB"
        } else {
          Write-Host "‚ùå Build failed - DataCheck.exe not found"
          echo "Contents of build directory:"
          if (Test-Path "build") { dir build -Recurse }
          exit 1
        }
    
    - name: Upload Windows EXE Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: DataCheck-Windows-EXE
        path: dist/DataCheck.exe
        retention-days: 30
