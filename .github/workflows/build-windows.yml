name: Build Windows EXE

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/build-windows.yml' ]

jobs:
  build-windows-exe:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pandas openpyxl pyodbc pymysql python-dateutil chardet
    
    - name: Test basic Python functionality
      run: |
        echo "=== Environment Check ==="
        python --version
        echo "Checking required modules:"
        python -c "import tkinter; print('OK tkinter')"
        python -c "import pandas; print('OK pandas')"
        python -c "import openpyxl; print('OK openpyxl')"
        python -c "import json; print('OK json')"
        echo ""
        echo "=== Project Files ==="
        dir *.py
        echo ""
        echo "=== Config Files ==="
        if (Test-Path "app_settings.json") { echo "OK app_settings.json" }
        if (Test-Path "check_definitions.json") { echo "OK check_definitions.json" }
    
    - name: Check required files before build
      run: |
        echo "=== Checking required files ==="
        if (Test-Path "app_settings.json") { echo "OK app_settings.json" } else { echo "MISSING app_settings.json"; exit 1 }
        if (Test-Path "check_definitions.json") { echo "OK check_definitions.json" } else { echo "MISSING check_definitions.json"; exit 1 }
        if (Test-Path "config.ini") { echo "OK config.ini (optional)" } else { echo "WARNING config.ini not found, will be included separately" }
        if (Test-Path "input_file") { echo "OK input_file directory" } else { echo "INFO input_file directory not found (optional)" }
        echo "File check completed"
    
    - name: Create PyInstaller spec file
      run: |
        Write-Host "Creating PyInstaller spec file..."
        $datas = @(
          "        ('app_settings.json', '.'),",
          "        ('check_definitions.json', '.'),"
        )
        if (Test-Path "input_file") {
          Write-Host "Including input_file directory in PyInstaller datas."
          $datas += "        ('input_file', 'input_file'),"
        } else {
          Write-Host "input_file directory not found. Skipping from datas."
        }

        $hiddenImports = @(
          "        'dekispart', 'innosite', 'dekispart_school', 'cloud',",
          "        'tkinter', 'tkinter.ttk', 'tkinter.messagebox', 'tkinter.filedialog',",
          "        'pandas', 'openpyxl', 'threading', 'datetime', 'json', 'os', 'sys', 'chardet'"
        )

        $specLines = @(
          "# -*- mode: python ; coding: utf-8 -*- ",
          "block_cipher = None",
          "",
          "a = Analysis(",
          "    ['data_check.py'],",
          "    pathex=[],",
          "    binaries=[],",
          "    datas=["
        )

        $specLines += $datas
        $specLines += @(
          "    ],",
          "    hiddenimports=["
        )
        $specLines += $hiddenImports
        $specLines += @(
          "    ],",
          "    hookspath=[],",
          "    runtime_hooks=[],",
          "    excludes=[],",
          "    cipher=block_cipher,",
          ")",
          "",
          "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)",
          "",
          "exe = EXE(",
          "    pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [],",
          "    name='DataCheck',",
          "    debug=False,",
          "    bootloader_ignore_signals=False,",
          "    strip=False,",
          "    upx=False,",
          "    runtime_tmpdir=None,",
          "    console=False,",
          "    disable_windowed_traceback=False",
          ")"
        )

        Set-Content -Path data_check.spec -Value $specLines -Encoding UTF8
        Write-Host "Spec file created successfully"
        Write-Host "ALL MODULES IMPORTED SUCCESSFULLY"
    
    - name: Build EXE with PyInstaller
      env:
        PYINSTALLER_BUILD: 1
      run: |
        echo "=== Building DataCheck.exe ==="
        pyinstaller data_check.spec --clean --noconfirm

    - name: Check build results and test EXE
      run: |
        echo "=== Build Results ==="
        if (Test-Path "dist") {
          echo "dist directory contents:"
          Get-ChildItem dist -Recurse | Format-Table Name, Length
          
          if (Test-Path "dist\DataCheck.exe") {
            $size = (Get-Item "dist\DataCheck.exe").Length / 1MB
            Write-Host "SUCCESS: DataCheck.exe created successfully"
            Write-Host "Size: $($size.ToString('F2')) MB"
            
            # Test EXE execution (basic check)
            echo ""
            echo "=== Testing EXE execution ==="
            try {
              $process = Start-Process -FilePath "dist\DataCheck.exe" -ArgumentList "--help" -PassThru -Wait -WindowStyle Hidden
              echo "SUCCESS: EXE runs without immediate crash"
            } catch {
              echo "WARNING: EXE test failed: $_"
            }
          } else {
            Write-Host "ERROR: DataCheck.exe not found"
            exit 1
          }
        } else {
          echo "ERROR: dist directory not created"
          exit 1
        }

    - name: Prepare distribution package
      run: |
        Write-Host "Preparing release package..."
        if (Test-Path "release_package") {
          Remove-Item -Recurse -Force release_package -ErrorAction SilentlyContinue
        }
        New-Item -ItemType Directory -Force -Path release_package | Out-Null
        Copy-Item "dist\DataCheck.exe" "release_package\" -Force
        if (Test-Path "app_settings.json") { Copy-Item "app_settings.json" "release_package\" -Force }
        if (Test-Path "check_definitions.json") { Copy-Item "check_definitions.json" "release_package\" -Force }
        if (Test-Path "config.ini") { Copy-Item "config.ini" "release_package\" -Force }
        if (Test-Path "input_file") {
          Write-Host "Copying input_file directory..."
          New-Item -ItemType Directory -Force -Path "release_package\input_file" | Out-Null
          robocopy "input_file" "release_package\input_file" /E /NFL /NDL /NJH /NJS /NP
          $robocopyExit = $LASTEXITCODE
          if ($robocopyExit -gt 3) {
            Write-Error "robocopy failed with exit code $robocopyExit"
            exit $robocopyExit
          }
        }
        if (Test-Path "DISTRIBUTION_README.md") { Copy-Item "DISTRIBUTION_README.md" "release_package\" -Force }
        Write-Host "Release package prepared in release_package/"

    - name: Upload Windows EXE Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: DataCheck-Windows-Distribution
        path: release_package/**
        retention-days: 30
        
    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: Build-Logs
        path: |
          build/
          *.log
        retention-days: 7
